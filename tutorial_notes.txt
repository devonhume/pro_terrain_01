To-Do:

Pipeline Rewrite:

-	Reorganize into pipeline 
-	Structured vertex list
-	Gui map features as individual objects added to pipeline 
-	Use seed for random generator
-	Savable ‘levels’ that can be called into an existing game
-	Two modes -
		1. gross generation - new seed, regens all features
		2. Fine generation - uses saved seed, changes / adds details

Landscape Features:

-	Roads 
-	Single mountain 
-	Range shapes, extents
-	Land limits 
-	Feature linking 
-	Waterfalls 
-	Clouds
-	Flat areas / clearings 
-	Lakes/ponds
-	Rivers/streams
-	Coastline 
-	Caves / dungeons 
-	Buildings? 
-	Irregular shapes
-	Better bumps
-	Procedural trees

Shaders / rendering:

-	Texture mapping to angles/objects 

	So texture mapping different textures onto the same mesh should happen in the shaders -
	In the vertex shader, you can set the transparency by height. Each VERTEX is a "pixel" drawn on the mesh
	If you want to map by triangle, you can send an array of just the triangles you want mapped to the shader (I think)
	You should be able to map by slope by converting the normal?
	
	** Clipmap that follows player - this is used with the shader from the video; smoothly renders a square of set size that follows the player
	** No idea if this will be the least bit useful
		Create a Node3D, make terrain mesh child of that node; save as scene; add script; 
		
		@export var player_character:Node3D
	
		func _physics_process(delta):
			global_position = player_charcter.global_posiiton.round() * Vector3(1, 0, 1)
			# Clipmap should only move in increments the size of the mesh's subdivisions - this is why we .round()
			# subdivision size is 1
			
	** Video uses collision map sampled from the height map that follows the player around!! (that's kind of genius)
	** In my code, we can simply add a stationary collision mesh for a given chunk if a player get's close enough and
	** free() it after player is a certain distance away maybe
	** Oh GENIUS! distance check are called be a ROUNDED position! I LOVE it!
	** video attaches collision mesh to a mesh-less StaticBody3D
	** video also attaches the clipmap to that static body
	
	** Height/Slope shader video:
		** Add a shader Material to the mesh using Material Override under Geometry; 
		** In the shader, give it a type of 'spatial'; add a uniform sampler 2D for each texture, drag each texture to it's spot;
		** in the shader params, define a fragment function and add 2 Vec3s that will contain the albedo values for each texture,
		** multiplying the uv by 4 to make the textures appear smaller on the mesh, since the y value of the normal at eack vertice of the mesh will be 1
		** if its face is totally flat and approach 0 as it gets steeper;
		** We are going to use it to determine the weight ina n interpolation between the grass and rock albedos;
		** We will be in View Space - to convert this to Model Space, put the normal variable in a vec4, multiply that by the camer matrix, then
		** get the y value from the result, or we can just declare a varying float and assign it the y value of the normal variable in the vertex function in glsl;
		** Interpolation finction is called 'mix';
		** Since every face of our mesh is angled, it is covered by a blend of both textures;
		** These faces also don't have slopes much greater than 45 degreees, so the y values are mostly in the upper end of the zero to one range and the grass
		** is much more predominant;
		** Let's change this so anywhere on the mesh 45 degrees or steeper, which will be a y value of 0.5 or less, will only show the rock texture
		** and anywhere close to being flat - let's say a y value of 0.9 or greater will only display grass;
		** Create two uniform floats; One will be called min_rock_slope, the other max_grass_slope;
		** Default them to 0.5 and 0.9 respectively; Also, give both a hint_range of 0 to 1;
		** Use the max function to set the weight of the min_rock_slope if it has a value less than the min_rock_slope,
		** then use the min function to set the weight to the max grass slope if it has a value greater than the max_grass_slope;
		** At this point the weight will range from 0.5 to 0.9; 
		** The weight will be set to 0.5 for any y value less than 0.5 and set to 0.9 for any vale greater than 0.9;
		** Subtract the min rock slope from the weight. Now it will only range from 0 to 0.4;
		** Lastly, we will divide the weight by the difference between our max_grass_slope and min_rock_slope -
		** this will normalize it back to a range between 0 and 1.
		** Now play around with these values in the editor;
		** The lower the max grass slope, the more the terrain will be grass, and the higher the min rock slope, the more the terrain will be rock.
		** This might seem counter-intuitive, but remember lower means steeper;
		** One thing to note - make sure these values aren't equal or else the mesh will turn black;
		** This is because it causes the shader to divide by zero when normalizing the range;
		** Now let's blend the sand with the rock and grass based on height; This process will be almost identical;
		** Start with two more uniform floats called min_rock_grass_height and max_sand_height;
		** Next create a varying float called vertex_y and assign it the y property of the vertex built-in variable in the vertex function;
		** Then assign vertex_y to a new weight value;
		** No we'll do the same calculations on this new weight with those two uniforms - 
		** max function with the min_rockgrass_height, min function with the max_sand_height;
		** Subtract the min_rockgrass_height and divide the by the distance between those two heights;
		** Afterwards, create a Vector3 that will contain the blended rock/grass albedo value,
		** then create another vec3 at the top of the fragment for the sand albedo and ciculate between 
		** the rock grass and the sand using the new weight value
		
			shader_type spatial; 
			uniform sampler2D grass_texture:source_color;
			uniform sampler2D rock_texture:source_color;
			uniform sampler2D sand_texture:source_color;
			
			uniform float min_rock_slope:hint_range(0.,1.,0.01) = 0.5;
			uniform float max_grass_slope:hint_range(0.,1.,0.01) = 0.9;
			uniform float min_rockgrass_height = -8.0;
			uniform float max_sand_height = -6.0;
			
			varying float normal_y;
			varying float vertex_y;
			
			void vertex(){
				normal_y = NORMAL.Y;
				vertex_y = VERTEX.Y;
			}
			
			void fragment(){
				//Albedo Values
				vec3 grass_albedo = texture(grass_texture,UV*4.0).xyz;
				vec3 rock_albedo = texture(rock_texture,UV*4.0).xyz;
				vec3 sand_albedo = texture(sand_texture,UV*4.0).xyz;
				
				//Weights
				//float rock_grass_weight = (INV_VIEW_MATRIX*vec4(NORMAL,0.)).y;
				float rock_grass_weight = normal.y
				float sand_rockgrass_weight = vertex_y;
				
				//Calculating Rock/Grass Weight
				rock_grass_weight = max(min_rock_slope, rock_grass_weight);
				rock_grass_weight = min(max_grass_slope, rock_grass_weight);
				rock_grass_weight -= min_rock_slope;
				rock_grass_weight /= max_grass_slope - min_rock_slope;
				
				//Calculating Sand/RockGrass Weight
				sand_rockgrass_weight = max(min_rockgrass_height, sand_rockgrass_weight);
				sand_rockgrass_weight = min(max_sand_height, sand_rockgrass_weight);
				sand_rockgrass_weight -= min_rockgrass_height;
				sand_rockgrass_weight /= max_sand_height - min_rockgrass_height;
				
				//Mixing and Assigning Albedo
				//ALBEDO = mix(rock_albedo, grass_albedo, rock_grass_weight);
				vec3 rockgrass_albedo = mix(rock_albedo, grass_albedo, rock_grass_weight);
				ALBEDO = mix(sand_albedo, rockgrass_albedo, sand_rockgrass_weight);
			}

-	Foliage shader
-	Biomes
-	Line-of-sight generation
-	Visibility by viewport 
-	Distance simplification 
-	Distance fog

Other Features:

-	Spawn point 
-	Integrate gui with Godot editor
-	Asset spawners
-	Origin marker 
-	Place marker


